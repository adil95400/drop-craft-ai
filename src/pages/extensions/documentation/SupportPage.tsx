import React, { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'
import { HelpCircle, MessageCircle, Mail, Phone, Search, Clock, CheckCircle, AlertCircle, Zap } from 'lucide-react'

export default function SupportPage() {
  const [ticketSubject, setTicketSubject] = useState('')
  const [ticketMessage, setTicketMessage] = useState('')
  const [ticketPriority, setTicketPriority] = useState('')
  const [searchQuery, setSearchQuery] = useState('')

  const supportStats = [
    { label: 'Temps de r√©ponse moyen', value: '< 4h', icon: Clock },
    { label: 'Taux de r√©solution', value: '96%', icon: CheckCircle },
    { label: 'Tickets r√©solus ce mois', value: '2,847', icon: Zap },
    { label: 'Note de satisfaction', value: '4.8/5', icon: HelpCircle }
  ]

  const contactMethods = [
    {
      title: 'Chat en Direct',
      description: 'Support instantan√© pendant les heures ouvrables',
      availability: 'Lun-Ven 9h-18h (CET)',
      responseTime: 'Imm√©diat',
      icon: MessageCircle,
      action: 'D√©marrer le chat'
    },
    {
      title: 'Ticket Support',
      description: 'Pour les questions techniques d√©taill√©es',
      availability: '24h/24, 7j/7',
      responseTime: '< 4h',
      icon: Mail,
      action: 'Cr√©er un ticket'
    },
    {
      title: 'Support T√©l√©phonique',
      description: 'Pour les clients Premium et Enterprise',
      availability: 'Lun-Ven 9h-17h (CET)',
      responseTime: 'Imm√©diat',
      icon: Phone,
      action: 'Programmer un appel'
    }
  ]

  const faqItems = [
    {
      id: 'installation',
      question: 'Comment installer une extension Chrome ?',
      answer: 'Pour installer une extension Chrome : 1) T√©l√©chargez le fichier .zip depuis notre marketplace, 2) Ouvrez Chrome et allez dans chrome://extensions/, 3) Activez le mode d√©veloppeur, 4) Cliquez sur "Charger l\'extension non empaquet√©e" et s√©lectionnez le dossier extrait.',
      category: 'Installation',
      helpful: 124,
      notHelpful: 8
    },
    {
      id: 'permissions',
      question: 'Pourquoi l\'extension demande-t-elle certaines permissions ?',
      answer: 'Les extensions demandent des permissions sp√©cifiques pour fonctionner correctement. Par exemple, l\'acc√®s aux onglets permet de d√©tecter les pages web, et l\'acc√®s au stockage permet de sauvegarder vos configurations. Nous suivons le principe du moindre privil√®ge.',
      category: 'S√©curit√©',
      helpful: 89,
      notHelpful: 12
    },
    {
      id: 'pricing',
      question: 'Quels sont les diff√©rents plans tarifaires ?',
      answer: 'Nous proposons 3 plans : Standard (gratuit) avec fonctionnalit√©s de base, Pro (‚Ç¨19/mois) avec features avanc√©es et Analytics, et Ultra Pro (‚Ç¨49/mois) avec toutes les fonctionnalit√©s, API illimit√©e et support prioritaire.',
      category: 'Facturation',
      helpful: 156,
      notHelpful: 5
    },
    {
      id: 'api-limits',
      question: 'Quelles sont les limites de l\'API ?',
      answer: 'Les limites d√©pendent de votre plan : Standard (100 requ√™tes/heure), Pro (1000 requ√™tes/heure), Ultra Pro (illimit√©). Les limites se r√©initialisent chaque heure. Pour des besoins sp√©cifiques, contactez notre √©quipe.',
      category: 'API',
      helpful: 73,
      notHelpful: 3
    },
    {
      id: 'data-security',
      question: 'Comment mes donn√©es sont-elles prot√©g√©es ?',
      answer: 'Toutes les donn√©es sont chiffr√©es en transit (TLS 1.3) et au repos (AES-256). Nous ne stockons jamais vos mots de passe en clair et appliquons des politiques strictes de s√©curit√©. Conformit√© RGPD assur√©e.',
      category: 'S√©curit√©',
      helpful: 201,
      notHelpful: 7
    },
    {
      id: 'troubleshooting',
      question: 'L\'extension ne fonctionne pas, que faire ?',
      answer: '√âtapes de d√©pannage : 1) V√©rifiez que l\'extension est activ√©e, 2) Rechargez la page et l\'extension, 3) V√©rifiez la console pour les erreurs (F12), 4) Testez en mode navigation priv√©e, 5) Si le probl√®me persiste, contactez le support avec les logs.',
      category: 'D√©pannage',
      helpful: 167,
      notHelpful: 23
    }
  ]

  const tickets = [
    {
      id: 'TIC-2024-001',
      subject: 'Erreur de synchronisation avec l\'API Shopify',
      status: 'open',
      priority: 'high',
      created: '2024-01-15 10:30',
      lastUpdate: '2024-01-15 14:20',
      responses: 3
    },
    {
      id: 'TIC-2024-002',
      subject: 'Question sur les limites de scraping',
      status: 'resolved',
      priority: 'medium',
      created: '2024-01-14 16:45',
      lastUpdate: '2024-01-15 09:15',
      responses: 5
    }
  ]

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      open: { variant: 'secondary' as const, text: 'Ouvert' },
      resolved: { variant: 'default' as const, text: 'R√©solu' },
      pending: { variant: 'outline' as const, text: 'En attente' }
    }
    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.open
    return <Badge variant={config.variant}>{config.text}</Badge>
  }

  const getPriorityBadge = (priority: string) => {
    const priorityConfig = {
      high: { variant: 'destructive' as const, text: 'Haute' },
      medium: { variant: 'secondary' as const, text: 'Moyenne' },
      low: { variant: 'outline' as const, text: 'Basse' }
    }
    const config = priorityConfig[priority as keyof typeof priorityConfig] || priorityConfig.medium
    return <Badge variant={config.variant}>{config.text}</Badge>
  }

  const filteredFAQ = faqItems.filter(item =>
    item.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
    item.answer.toLowerCase().includes(searchQuery.toLowerCase()) ||
    item.category.toLowerCase().includes(searchQuery.toLowerCase())
  )

  const handleTicketSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Simulate ticket creation
    console.log('Ticket created:', { ticketSubject, ticketMessage, ticketPriority })
    setTicketSubject('')
    setTicketMessage('')
    setTicketPriority('')
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">
          Support & Assistance
        </h1>
        <p className="text-muted-foreground mt-2">
          Obtenez l'aide dont vous avez besoin pour utiliser nos extensions
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {supportStats.map((stat, index) => {
          const Icon = stat.icon
          return (
            <Card key={index}>
              <CardContent className="p-4 text-center">
                <Icon className="w-6 h-6 mx-auto mb-2 text-primary" />
                <div className="text-2xl font-bold">{stat.value}</div>
                <p className="text-sm text-muted-foreground">{stat.label}</p>
              </CardContent>
            </Card>
          )
        })}
      </div>

      <Tabs defaultValue="faq" className="space-y-4">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="faq">FAQ</TabsTrigger>
          <TabsTrigger value="contact">Contact</TabsTrigger>
          <TabsTrigger value="tickets">Mes Tickets</TabsTrigger>
          <TabsTrigger value="resources">Ressources</TabsTrigger>
        </TabsList>

        <TabsContent value="faq" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Questions Fr√©quemment Pos√©es</CardTitle>
              <CardDescription>
                Trouvez rapidement des r√©ponses aux questions les plus courantes
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                <Input
                  placeholder="Rechercher dans la FAQ..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>

              <Accordion type="single" collapsible className="space-y-2">
                {filteredFAQ.map((item) => (
                  <AccordionItem key={item.id} value={item.id} className="border rounded-lg px-4">
                    <AccordionTrigger className="hover:no-underline">
                      <div className="flex items-center justify-between w-full">
                        <span className="text-left">{item.question}</span>
                        <Badge variant="outline" className="ml-2">{item.category}</Badge>
                      </div>
                    </AccordionTrigger>
                    <AccordionContent className="space-y-4">
                      <p className="text-muted-foreground">{item.answer}</p>
                      <div className="flex items-center justify-between pt-2 border-t">
                        <div className="flex items-center space-x-4">
                          <span className="text-sm text-muted-foreground">Cette r√©ponse vous a-t-elle aid√© ?</span>
                          <div className="flex space-x-2">
                            <Button variant="outline" size="sm">
                              üëç {item.helpful}
                            </Button>
                            <Button variant="outline" size="sm">
                              üëé {item.notHelpful}
                            </Button>
                          </div>
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                ))}
              </Accordion>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="contact" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {contactMethods.map((method, index) => {
              const Icon = method.icon
              return (
                <Card key={index} className="text-center">
                  <CardContent className="p-6">
                    <Icon className="w-12 h-12 mx-auto mb-4 text-primary" />
                    <h3 className="font-semibold text-lg mb-2">{method.title}</h3>
                    <p className="text-sm text-muted-foreground mb-4">{method.description}</p>
                    <div className="space-y-2 mb-4">
                      <div className="text-xs text-muted-foreground">
                        <strong>Disponibilit√©:</strong> {method.availability}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        <strong>Temps de r√©ponse:</strong> {method.responseTime}
                      </div>
                    </div>
                    <Button className="w-full">{method.action}</Button>
                  </CardContent>
                </Card>
              )
            })}
          </div>

          <Card>
            <CardHeader>
              <CardTitle>Cr√©er un Ticket de Support</CardTitle>
              <CardDescription>
                D√©crivez votre probl√®me en d√©tail pour une assistance rapide
              </CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleTicketSubmit} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <label htmlFor="subject" className="text-sm font-medium">Sujet</label>
                    <Input
                      id="subject"
                      placeholder="R√©sumez votre probl√®me en quelques mots"
                      value={ticketSubject}
                      onChange={(e) => setTicketSubject(e.target.value)}
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <label htmlFor="priority" className="text-sm font-medium">Priorit√©</label>
                    <Select value={ticketPriority} onValueChange={setTicketPriority} required>
                      <SelectTrigger>
                        <SelectValue placeholder="S√©lectionner la priorit√©" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="low">Basse - Question g√©n√©rale</SelectItem>
                        <SelectItem value="medium">Moyenne - Probl√®me fonctionnel</SelectItem>
                        <SelectItem value="high">Haute - Erreur critique</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div className="space-y-2">
                  <label htmlFor="message" className="text-sm font-medium">Description d√©taill√©e</label>
                  <Textarea
                    id="message"
                    placeholder="D√©crivez votre probl√®me, les √©tapes pour le reproduire, et toute information utile..."
                    value={ticketMessage}
                    onChange={(e) => setTicketMessage(e.target.value)}
                    rows={6}
                    required
                  />
                </div>
                <Button type="submit" className="w-full">
                  Envoyer le ticket
                </Button>
              </form>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="tickets" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Mes Tickets de Support</CardTitle>
              <CardDescription>
                Suivez l'√©tat de vos demandes de support
              </CardDescription>
            </CardHeader>
            <CardContent>
              {tickets.length === 0 ? (
                <div className="text-center py-8">
                  <HelpCircle className="w-12 h-12 mx-auto text-muted-foreground mb-4" />
                  <p className="text-muted-foreground">Aucun ticket de support pour le moment</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {tickets.map((ticket) => (
                    <Card key={ticket.id}>
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center space-x-3">
                            <span className="font-mono text-sm text-muted-foreground">{ticket.id}</span>
                            {getStatusBadge(ticket.status)}
                            {getPriorityBadge(ticket.priority)}
                          </div>
                          <span className="text-sm text-muted-foreground">{ticket.responses} r√©ponses</span>
                        </div>
                        
                        <h3 className="font-semibold mb-2">{ticket.subject}</h3>
                        
                        <div className="flex items-center justify-between text-sm text-muted-foreground">
                          <span>Cr√©√© le {ticket.created}</span>
                          <span>Derni√®re mise √† jour : {ticket.lastUpdate}</span>
                        </div>
                        
                        <div className="flex justify-end mt-3 space-x-2">
                          <Button variant="outline" size="sm">Voir d√©tails</Button>
                          {ticket.status === 'open' && (
                            <Button size="sm">R√©pondre</Button>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="resources" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Documentation</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button variant="outline" className="w-full justify-start">
                  <HelpCircle className="w-4 h-4 mr-2" />
                  Guide de d√©marrage rapide
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <HelpCircle className="w-4 h-4 mr-2" />
                  Documentation API compl√®te
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <HelpCircle className="w-4 h-4 mr-2" />
                  Tutoriels vid√©o
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <HelpCircle className="w-4 h-4 mr-2" />
                  Exemples de code
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Communaut√©</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button variant="outline" className="w-full justify-start">
                  <MessageCircle className="w-4 h-4 mr-2" />
                  Forum communautaire
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <MessageCircle className="w-4 h-4 mr-2" />
                  Discord officiel
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <MessageCircle className="w-4 h-4 mr-2" />
                  Stack Overflow
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <MessageCircle className="w-4 h-4 mr-2" />
                  GitHub Discussions
                </Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}